# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Â© 2021 Aalto University

name: Build Wheels

on:
  push:
    branches: [ "*stable", "buildsystem-test" ]
    tags: [ "*rc*" ]

jobs:
  build-cuda-wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
        cuda-setup: [
        # [cuda-version, cuda-link, gcc-version]
          [10.0.130, "https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux", 7],
          [10.1.243, "https://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run", 8],
          [10.2.89, "https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run", 8],
          [11.0.3, "https://developer.download.nvidia.com/compute/cuda/11.0.3/local_installers/cuda_11.0.3_450.51.06_linux.run", 9],
          [11.1.1, "https://developer.download.nvidia.com/compute/cuda/11.1.1/local_installers/cuda_11.1.1_455.32.00_linux.run", 9]
        ]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Pip
      run: |
        pip install wheel
    - name: Install GCC ${{ matrix.cuda-setup[2] }}
      run: |
        sudo apt-get update
        sudo apt-get install gcc-${{ matrix.cuda-setup[2] }} g++-${{ matrix.cuda-setup[2] }}
        sudo ln -sf /usr/bin/gcc-${{ matrix.cuda-setup[2] }} /usr/bin/gcc
        sudo ln -sf /usr/bin/g++-${{ matrix.cuda-setup[2] }} /usr/bin/gcc
    - name: Set up CUDA-Toolkit ${{ matrix.cuda-setup[0] }}
      run: |
        wget -q -O installer.run ${{ matrix.cuda-setup[1] }}
        /usr/bin/sudo sh ./installer.run --toolkit --silent
    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v1.9
    - name: Create Wheel
      run: |
        export JAX_CHACHA_PRNG_BUILD=cuda$(echo ${{ matrix.cuda-setup[0] }} | cut -d. -f1,2 | sed 's/\.//')
        export PATH=/usr/local/cuda/bin:$PATH
        python setup.py bdist_wheel
    - uses: actions/upload-artifact@v2
      with:
        name: wheel_${{ matrix.python-version }}_cuda${{ matrix.cuda-setup[0] }}
        path: dist/jax_chacha_prng*.whl
        if-no-files-found: error

  build-cpu-wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Pip
      run: |
        pip install wheel
    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v1.9
    - name: Create Wheel
      run: |
        export PATH=/usr/local/cuda/bin:$PATH
        python setup.py bdist_wheel
    - uses: actions/upload-artifact@v2
      with:
        name: wheel_${{ matrix.python-version }}_cpu
        path: dist/jax_chacha_prng*.whl
        if-no-files-found: error

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build-cuda-wheels
      - build-cpu-wheels
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: wheels
      - name: Publish Pre-Release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(python -c "import chacha.version; print(chacha.version.VERSION)")
          TAG_NAME=${GITHUB_REF##refs/tags/}
          echo "Version: ${VERSION}"
          echo "Ref: ${GITHUB_REF}"
          echo "Tag: ${TAG_NAME}"
          assets=()
          for asset in $(find wheels -type f); do
            echo "Adding asset: ${asset}"
            assets+=("-a" "$asset")
          done
          hub release create -p "${assets[@]}" -m "$VERSION" -F ChangeLog.txt "$VERSION"
      - name: Publish Release
        if: contains(github.ref, 'stable')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(python -c "import chacha.version; print(chacha.version.VERSION)")
          echo "Version: ${VERSION}"
          echo "Ref: ${GITHUB_REF}"
          echo "Commit: ${GITHUB_SHA}"
          assets=()
          for asset in $(find wheels -type f); do
            echo "Adding asset: ${asset}"
            assets+=("-a" "$asset")
          done
          hub release create "${assets[@]}" -m "$VERSION" -F ChangeLog.txt -t "$GITHUB_SHA" "$VERSION"
