- 2.0.0-rc.2:
    - Fix: OpenMP is no longer a strict requirement for installation.
    - Added: chacha.native.openmp_accelerated, returns True if CPU kernels are parallelised using OpenMP.
    - Added: Generic (not hardware-specific) CPU kernels as well as vectorized CPU kernels for ARM CPUs.
    - Added: random.is_state_invalidated to check if a PRNGKey was invalidated.
    - Changed: random.split now can perform nested splits only up to a limit and returns
        an invalidated state if this limit is exceeded. This is to guarantee
        unique states after each split derived from the same inital randomness state.
    - Changed: random.random_bits now return a new rng key for subsequent calls to
        produce randmoness as well as an error flag integer,
        which is set if the input randomness state was invalidated or the
        randomness counter overflows.
    - Changed: random.uniform now returns all NaNs if the input randomness state
        was invalidated or the randomness counter overflows. It also accepts additional
        kwarg return_next_key that returns a new rng key.
    - Removed: random.fold_in.
- 1.2.0:
    - Deprecated: random.fold_in.
- 1.1.1:
    - Added: support for jax up to v0.3.13.
- 1.1.0:
    - Added: support for multiple layers of vmap wraps for functions in chacha.random.
    - Added: support for jax up to v0.3.1.
- 1.0.0:
    - Added: Native implementations for ChaCha block function as JAX ops.
    - Added: chacha.native.cuda_supported, returns True if cuda kernels were compiled.
    - Added: wheels for Python 3.10.
    - Added: support for jax up to v0.2.27.
    - Removed: support for jax v0.2.10 - v0.2.11.
- 0.1.0-alpha.2:
    - Fix: random.random_bits() no longer fails for empty shape.
    - Added: support for jax v0.2.14.
    - Added: random.fold_in().
- 0.1.0-alpha: Initial Release
